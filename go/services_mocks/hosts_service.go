// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reviewpad/api/go/services (interfaces: HostsClient)

// Package services_mocks is a generated GoMock package.
package services_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	services "github.com/reviewpad/api/go/services"
	grpc "google.golang.org/grpc"
)

// MockHostsClient is a mock of HostsClient interface.
type MockHostsClient struct {
	ctrl     *gomock.Controller
	recorder *MockHostsClientMockRecorder
}

// MockHostsClientMockRecorder is the mock recorder for MockHostsClient.
type MockHostsClientMockRecorder struct {
	mock *MockHostsClient
}

// NewMockHostsClient creates a new mock instance.
func NewMockHostsClient(ctrl *gomock.Controller) *MockHostsClient {
	mock := &MockHostsClient{ctrl: ctrl}
	mock.recorder = &MockHostsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHostsClient) EXPECT() *MockHostsClientMockRecorder {
	return m.recorder
}

// GetPullRequest mocks base method.
func (m *MockHostsClient) GetPullRequest(arg0 context.Context, arg1 *services.GetPullRequestRequest, arg2 ...grpc.CallOption) (*services.GetPullRequestReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPullRequest", varargs...)
	ret0, _ := ret[0].(*services.GetPullRequestReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequest indicates an expected call of GetPullRequest.
func (mr *MockHostsClientMockRecorder) GetPullRequest(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequest", reflect.TypeOf((*MockHostsClient)(nil).GetPullRequest), varargs...)
}

// GetPullRequestFiles mocks base method.
func (m *MockHostsClient) GetPullRequestFiles(arg0 context.Context, arg1 *services.GetPullRequestFilesRequest, arg2 ...grpc.CallOption) (*services.GetPullRequestFilesReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPullRequestFiles", varargs...)
	ret0, _ := ret[0].(*services.GetPullRequestFilesReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestFiles indicates an expected call of GetPullRequestFiles.
func (mr *MockHostsClientMockRecorder) GetPullRequestFiles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestFiles", reflect.TypeOf((*MockHostsClient)(nil).GetPullRequestFiles), varargs...)
}

// PostGeneralComment mocks base method.
func (m *MockHostsClient) PostGeneralComment(arg0 context.Context, arg1 *services.PostGeneralCommentRequest, arg2 ...grpc.CallOption) (*services.PostGeneralCommentReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostGeneralComment", varargs...)
	ret0, _ := ret[0].(*services.PostGeneralCommentReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostGeneralComment indicates an expected call of PostGeneralComment.
func (mr *MockHostsClientMockRecorder) PostGeneralComment(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostGeneralComment", reflect.TypeOf((*MockHostsClient)(nil).PostGeneralComment), varargs...)
}
