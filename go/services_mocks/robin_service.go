// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reviewpad/api/go/services (interfaces: RobinClient)

// Package services_mocks is a generated GoMock package.
package services_mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	services "github.com/reviewpad/api/go/services"
	grpc "google.golang.org/grpc"
)

// MockRobinClient is a mock of RobinClient interface.
type MockRobinClient struct {
	ctrl     *gomock.Controller
	recorder *MockRobinClientMockRecorder
}

// MockRobinClientMockRecorder is the mock recorder for MockRobinClient.
type MockRobinClientMockRecorder struct {
	mock *MockRobinClient
}

// NewMockRobinClient creates a new mock instance.
func NewMockRobinClient(ctrl *gomock.Controller) *MockRobinClient {
	mock := &MockRobinClient{ctrl: ctrl}
	mock.recorder = &MockRobinClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRobinClient) EXPECT() *MockRobinClientMockRecorder {
	return m.recorder
}

// Explain mocks base method.
func (m *MockRobinClient) Explain(arg0 context.Context, arg1 *services.ExplainRequest, arg2 ...grpc.CallOption) (*services.ExplainReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Explain", varargs...)
	ret0, _ := ret[0].(*services.ExplainReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Explain indicates an expected call of Explain.
func (mr *MockRobinClientMockRecorder) Explain(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Explain", reflect.TypeOf((*MockRobinClient)(nil).Explain), varargs...)
}

// Prompt mocks base method.
func (m *MockRobinClient) Prompt(arg0 context.Context, arg1 *services.PromptRequest, arg2 ...grpc.CallOption) (*services.PromptReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Prompt", varargs...)
	ret0, _ := ret[0].(*services.PromptReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prompt indicates an expected call of Prompt.
func (mr *MockRobinClientMockRecorder) Prompt(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prompt", reflect.TypeOf((*MockRobinClient)(nil).Prompt), varargs...)
}

// RawPrompt mocks base method.
func (m *MockRobinClient) RawPrompt(arg0 context.Context, arg1 *services.RawPromptRequest, arg2 ...grpc.CallOption) (*services.PromptReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RawPrompt", varargs...)
	ret0, _ := ret[0].(*services.PromptReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawPrompt indicates an expected call of RawPrompt.
func (mr *MockRobinClientMockRecorder) RawPrompt(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawPrompt", reflect.TypeOf((*MockRobinClient)(nil).RawPrompt), varargs...)
}

// Summarize mocks base method.
func (m *MockRobinClient) Summarize(arg0 context.Context, arg1 *services.SummarizeRequest, arg2 ...grpc.CallOption) (*services.SummarizeReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Summarize", varargs...)
	ret0, _ := ret[0].(*services.SummarizeReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Summarize indicates an expected call of Summarize.
func (mr *MockRobinClientMockRecorder) Summarize(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Summarize", reflect.TypeOf((*MockRobinClient)(nil).Summarize), varargs...)
}
