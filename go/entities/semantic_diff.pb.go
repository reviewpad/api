// Copyright 2023 Explore.dev Unipessoal Lda. All Rights Reserved.
// Use of this source code is governed by a license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.4
// source: entities/semantic_diff.proto

package entities

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SortCriterium int32

const (
	SortCriterium_TOP_DOWN   SortCriterium = 0
	SortCriterium_BOTTOM_UP  SortCriterium = 1
	SortCriterium_START_LINE SortCriterium = 2
)

// Enum value maps for SortCriterium.
var (
	SortCriterium_name = map[int32]string{
		0: "TOP_DOWN",
		1: "BOTTOM_UP",
		2: "START_LINE",
	}
	SortCriterium_value = map[string]int32{
		"TOP_DOWN":   0,
		"BOTTOM_UP":  1,
		"START_LINE": 2,
	}
)

func (x SortCriterium) Enum() *SortCriterium {
	p := new(SortCriterium)
	*p = x
	return p
}

func (x SortCriterium) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortCriterium) Descriptor() protoreflect.EnumDescriptor {
	return file_entities_semantic_diff_proto_enumTypes[0].Descriptor()
}

func (SortCriterium) Type() protoreflect.EnumType {
	return &file_entities_semantic_diff_proto_enumTypes[0]
}

func (x SortCriterium) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortCriterium.Descriptor instead.
func (SortCriterium) EnumDescriptor() ([]byte, []int) {
	return file_entities_semantic_diff_proto_rawDescGZIP(), []int{0}
}

type ChangeType int32

const (
	ChangeType_UNMODIFIED ChangeType = 0
	ChangeType_REMOVED    ChangeType = 1
	ChangeType_MODIFIED   ChangeType = 2
	ChangeType_ADDED      ChangeType = 3
)

// Enum value maps for ChangeType.
var (
	ChangeType_name = map[int32]string{
		0: "UNMODIFIED",
		1: "REMOVED",
		2: "MODIFIED",
		3: "ADDED",
	}
	ChangeType_value = map[string]int32{
		"UNMODIFIED": 0,
		"REMOVED":    1,
		"MODIFIED":   2,
		"ADDED":      3,
	}
)

func (x ChangeType) Enum() *ChangeType {
	p := new(ChangeType)
	*p = x
	return p
}

func (x ChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_entities_semantic_diff_proto_enumTypes[1].Descriptor()
}

func (ChangeType) Type() protoreflect.EnumType {
	return &file_entities_semantic_diff_proto_enumTypes[1]
}

func (x ChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeType.Descriptor instead.
func (ChangeType) EnumDescriptor() ([]byte, []int) {
	return file_entities_semantic_diff_proto_rawDescGZIP(), []int{1}
}

type ChangeNature int32

const (
	ChangeNature_SYNTATIC   ChangeNature = 0
	ChangeNature_FORMATTING ChangeNature = 1
)

// Enum value maps for ChangeNature.
var (
	ChangeNature_name = map[int32]string{
		0: "SYNTATIC",
		1: "FORMATTING",
	}
	ChangeNature_value = map[string]int32{
		"SYNTATIC":   0,
		"FORMATTING": 1,
	}
)

func (x ChangeNature) Enum() *ChangeNature {
	p := new(ChangeNature)
	*p = x
	return p
}

func (x ChangeNature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeNature) Descriptor() protoreflect.EnumDescriptor {
	return file_entities_semantic_diff_proto_enumTypes[2].Descriptor()
}

func (ChangeNature) Type() protoreflect.EnumType {
	return &file_entities_semantic_diff_proto_enumTypes[2]
}

func (x ChangeNature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeNature.Descriptor instead.
func (ChangeNature) EnumDescriptor() ([]byte, []int) {
	return file_entities_semantic_diff_proto_rawDescGZIP(), []int{2}
}

type Direction int32

const (
	Direction_UP   Direction = 0
	Direction_DOWN Direction = 1
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "UP",
		1: "DOWN",
	}
	Direction_value = map[string]int32{
		"UP":   0,
		"DOWN": 1,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_entities_semantic_diff_proto_enumTypes[3].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_entities_semantic_diff_proto_enumTypes[3]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_entities_semantic_diff_proto_rawDescGZIP(), []int{3}
}

type SymbolDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldInfo            *SymbolInfo             `protobuf:"bytes,1,opt,name=old_info,json=oldInfo,proto3" json:"old_info,omitempty"`
	NewInfo            *SymbolInfo             `protobuf:"bytes,2,opt,name=new_info,json=newInfo,proto3" json:"new_info,omitempty"`
	Type               string                  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	AgnosticType       AgnosticType            `protobuf:"varint,4,opt,name=agnostic_type,json=agnosticType,proto3,enum=entities.AgnosticType" json:"agnostic_type,omitempty"`
	TypeRank           int32                   `protobuf:"varint,5,opt,name=type_rank,json=typeRank,proto3" json:"type_rank,omitempty"`
	Ranks              []*SortRank             `protobuf:"bytes,6,rep,name=ranks,proto3" json:"ranks,omitempty"`
	ChangeType         ChangeType              `protobuf:"varint,7,opt,name=change_type,json=changeType,proto3,enum=entities.ChangeType" json:"change_type,omitempty"`
	ParentId           string                  `protobuf:"bytes,8,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	InnerSymbols       []string                `protobuf:"bytes,9,rep,name=inner_symbols,json=innerSymbols,proto3" json:"inner_symbols,omitempty"`
	Definitions        map[string]*FileChanges `protobuf:"bytes,10,rep,name=definitions,proto3" json:"definitions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //File path to definitions in file
	Uses               map[string]*FileChanges `protobuf:"bytes,11,rep,name=uses,proto3" json:"uses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`               //File path to uses in file
	MainDefinitionPath string                  `protobuf:"bytes,12,opt,name=main_definition_path,json=mainDefinitionPath,proto3" json:"main_definition_path,omitempty"`
	CodeComments       []*SymbolDocumentation  `protobuf:"bytes,13,rep,name=code_comments,json=codeComments,proto3" json:"code_comments,omitempty"`
	Signature          *SymbolDocumentation    `protobuf:"bytes,14,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SymbolDiff) Reset() {
	*x = SymbolDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_semantic_diff_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolDiff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolDiff) ProtoMessage() {}

func (x *SymbolDiff) ProtoReflect() protoreflect.Message {
	mi := &file_entities_semantic_diff_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolDiff.ProtoReflect.Descriptor instead.
func (*SymbolDiff) Descriptor() ([]byte, []int) {
	return file_entities_semantic_diff_proto_rawDescGZIP(), []int{0}
}

func (x *SymbolDiff) GetOldInfo() *SymbolInfo {
	if x != nil {
		return x.OldInfo
	}
	return nil
}

func (x *SymbolDiff) GetNewInfo() *SymbolInfo {
	if x != nil {
		return x.NewInfo
	}
	return nil
}

func (x *SymbolDiff) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SymbolDiff) GetAgnosticType() AgnosticType {
	if x != nil {
		return x.AgnosticType
	}
	return AgnosticType_UNSPECIFIED
}

func (x *SymbolDiff) GetTypeRank() int32 {
	if x != nil {
		return x.TypeRank
	}
	return 0
}

func (x *SymbolDiff) GetRanks() []*SortRank {
	if x != nil {
		return x.Ranks
	}
	return nil
}

func (x *SymbolDiff) GetChangeType() ChangeType {
	if x != nil {
		return x.ChangeType
	}
	return ChangeType_UNMODIFIED
}

func (x *SymbolDiff) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *SymbolDiff) GetInnerSymbols() []string {
	if x != nil {
		return x.InnerSymbols
	}
	return nil
}

func (x *SymbolDiff) GetDefinitions() map[string]*FileChanges {
	if x != nil {
		return x.Definitions
	}
	return nil
}

func (x *SymbolDiff) GetUses() map[string]*FileChanges {
	if x != nil {
		return x.Uses
	}
	return nil
}

func (x *SymbolDiff) GetMainDefinitionPath() string {
	if x != nil {
		return x.MainDefinitionPath
	}
	return ""
}

func (x *SymbolDiff) GetCodeComments() []*SymbolDocumentation {
	if x != nil {
		return x.CodeComments
	}
	return nil
}

func (x *SymbolDiff) GetSignature() *SymbolDocumentation {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SortRank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Criterium SortCriterium `protobuf:"varint,1,opt,name=criterium,proto3,enum=entities.SortCriterium" json:"criterium,omitempty"`
	Rank      int32         `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (x *SortRank) Reset() {
	*x = SortRank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_semantic_diff_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortRank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortRank) ProtoMessage() {}

func (x *SortRank) ProtoReflect() protoreflect.Message {
	mi := &file_entities_semantic_diff_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortRank.ProtoReflect.Descriptor instead.
func (*SortRank) Descriptor() ([]byte, []int) {
	return file_entities_semantic_diff_proto_rawDescGZIP(), []int{1}
}

func (x *SortRank) GetCriterium() SortCriterium {
	if x != nil {
		return x.Criterium
	}
	return SortCriterium_TOP_DOWN
}

func (x *SortRank) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

type SymbolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SymbolInfo) Reset() {
	*x = SymbolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_semantic_diff_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolInfo) ProtoMessage() {}

func (x *SymbolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_entities_semantic_diff_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolInfo.ProtoReflect.Descriptor instead.
func (*SymbolInfo) Descriptor() ([]byte, []int) {
	return file_entities_semantic_diff_proto_rawDescGZIP(), []int{2}
}

func (x *SymbolInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SymbolInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FileChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath  string          `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	MainBlock int32           `protobuf:"varint,2,opt,name=main_block,json=mainBlock,proto3" json:"main_block,omitempty"`
	Changes   []*ChangesBlock `protobuf:"bytes,3,rep,name=changes,proto3" json:"changes,omitempty"`
	Hidden    bool            `protobuf:"varint,4,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Rank      int32           `protobuf:"varint,5,opt,name=rank,proto3" json:"rank,omitempty"`
	Ignored   bool            `protobuf:"varint,6,opt,name=ignored,proto3" json:"ignored,omitempty"`
}

func (x *FileChanges) Reset() {
	*x = FileChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_semantic_diff_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChanges) ProtoMessage() {}

func (x *FileChanges) ProtoReflect() protoreflect.Message {
	mi := &file_entities_semantic_diff_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChanges.ProtoReflect.Descriptor instead.
func (*FileChanges) Descriptor() ([]byte, []int) {
	return file_entities_semantic_diff_proto_rawDescGZIP(), []int{3}
}

func (x *FileChanges) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileChanges) GetMainBlock() int32 {
	if x != nil {
		return x.MainBlock
	}
	return 0
}

func (x *FileChanges) GetChanges() []*ChangesBlock {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *FileChanges) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *FileChanges) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *FileChanges) GetIgnored() bool {
	if x != nil {
		return x.Ignored
	}
	return false
}

type ChangesBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Before          *CodeChanges `protobuf:"bytes,1,opt,name=before,proto3" json:"before,omitempty"`
	Core            *CodeChanges `protobuf:"bytes,2,opt,name=core,proto3" json:"core,omitempty"`
	After           *CodeChanges `protobuf:"bytes,3,opt,name=after,proto3" json:"after,omitempty"`
	Container       *Container   `protobuf:"bytes,5,opt,name=container,proto3" json:"container,omitempty"`
	PreviousOldLine int32        `protobuf:"varint,6,opt,name=previous_old_line,json=previousOldLine,proto3" json:"previous_old_line,omitempty"`
	PreviousNewLine int32        `protobuf:"varint,7,opt,name=previous_new_line,json=previousNewLine,proto3" json:"previous_new_line,omitempty"`
	SymbolId        string       `protobuf:"bytes,8,opt,name=symbol_id,json=symbolId,proto3" json:"symbol_id,omitempty"`
	ChangeNature    ChangeNature `protobuf:"varint,9,opt,name=change_nature,json=changeNature,proto3,enum=entities.ChangeNature" json:"change_nature,omitempty"`
}

func (x *ChangesBlock) Reset() {
	*x = ChangesBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_semantic_diff_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangesBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangesBlock) ProtoMessage() {}

func (x *ChangesBlock) ProtoReflect() protoreflect.Message {
	mi := &file_entities_semantic_diff_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangesBlock.ProtoReflect.Descriptor instead.
func (*ChangesBlock) Descriptor() ([]byte, []int) {
	return file_entities_semantic_diff_proto_rawDescGZIP(), []int{4}
}

func (x *ChangesBlock) GetBefore() *CodeChanges {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *ChangesBlock) GetCore() *CodeChanges {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *ChangesBlock) GetAfter() *CodeChanges {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *ChangesBlock) GetContainer() *Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *ChangesBlock) GetPreviousOldLine() int32 {
	if x != nil {
		return x.PreviousOldLine
	}
	return 0
}

func (x *ChangesBlock) GetPreviousNewLine() int32 {
	if x != nil {
		return x.PreviousNewLine
	}
	return 0
}

func (x *ChangesBlock) GetSymbolId() string {
	if x != nil {
		return x.SymbolId
	}
	return ""
}

func (x *ChangesBlock) GetChangeNature() ChangeNature {
	if x != nil {
		return x.ChangeNature
	}
	return ChangeNature_SYNTATIC
}

type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	StartLine int32  `protobuf:"varint,2,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine   int32  `protobuf:"varint,3,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	FromNew   bool   `protobuf:"varint,4,opt,name=from_new,json=fromNew,proto3" json:"from_new,omitempty"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_semantic_diff_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_entities_semantic_diff_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_entities_semantic_diff_proto_rawDescGZIP(), []int{5}
}

func (x *Container) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Container) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *Container) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *Container) GetFromNew() bool {
	if x != nil {
		return x.FromNew
	}
	return false
}

type CodeChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Old          *CodeBlock      `protobuf:"bytes,1,opt,name=old,proto3" json:"old,omitempty"`
	New          *CodeBlock      `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
	Changes      []*Change       `protobuf:"bytes,3,rep,name=changes,proto3" json:"changes,omitempty"`
	InnerChanges []*ChangesBlock `protobuf:"bytes,4,rep,name=inner_changes,json=innerChanges,proto3" json:"inner_changes,omitempty"`
	Collapsed    bool            `protobuf:"varint,5,opt,name=collapsed,proto3" json:"collapsed,omitempty"`
}

func (x *CodeChanges) Reset() {
	*x = CodeChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_semantic_diff_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeChanges) ProtoMessage() {}

func (x *CodeChanges) ProtoReflect() protoreflect.Message {
	mi := &file_entities_semantic_diff_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeChanges.ProtoReflect.Descriptor instead.
func (*CodeChanges) Descriptor() ([]byte, []int) {
	return file_entities_semantic_diff_proto_rawDescGZIP(), []int{6}
}

func (x *CodeChanges) GetOld() *CodeBlock {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *CodeChanges) GetNew() *CodeBlock {
	if x != nil {
		return x.New
	}
	return nil
}

func (x *CodeChanges) GetChanges() []*Change {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *CodeChanges) GetInnerChanges() []*ChangesBlock {
	if x != nil {
		return x.InnerChanges
	}
	return nil
}

func (x *CodeChanges) GetCollapsed() bool {
	if x != nil {
		return x.Collapsed
	}
	return false
}

type CodeBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code       []byte           `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	StartLine  int32            `protobuf:"varint,2,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine    int32            `protobuf:"varint,3,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	References []*WordReference `protobuf:"bytes,4,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *CodeBlock) Reset() {
	*x = CodeBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_semantic_diff_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeBlock) ProtoMessage() {}

func (x *CodeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_entities_semantic_diff_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeBlock.ProtoReflect.Descriptor instead.
func (*CodeBlock) Descriptor() ([]byte, []int) {
	return file_entities_semantic_diff_proto_rawDescGZIP(), []int{7}
}

func (x *CodeBlock) GetCode() []byte {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *CodeBlock) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *CodeBlock) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *CodeBlock) GetReferences() []*WordReference {
	if x != nil {
		return x.References
	}
	return nil
}

type Change struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          ChangeType       `protobuf:"varint,1,opt,name=type,proto3,enum=entities.ChangeType" json:"type,omitempty"`
	Old           *Lines           `protobuf:"bytes,2,opt,name=old,proto3" json:"old,omitempty"`
	New           *Lines           `protobuf:"bytes,3,opt,name=new,proto3" json:"new,omitempty"`
	InlineChanges []*InlineChanges `protobuf:"bytes,4,rep,name=inline_changes,json=inlineChanges,proto3" json:"inline_changes,omitempty"`
}

func (x *Change) Reset() {
	*x = Change{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_semantic_diff_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change) ProtoMessage() {}

func (x *Change) ProtoReflect() protoreflect.Message {
	mi := &file_entities_semantic_diff_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change.ProtoReflect.Descriptor instead.
func (*Change) Descriptor() ([]byte, []int) {
	return file_entities_semantic_diff_proto_rawDescGZIP(), []int{8}
}

func (x *Change) GetType() ChangeType {
	if x != nil {
		return x.Type
	}
	return ChangeType_UNMODIFIED
}

func (x *Change) GetOld() *Lines {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *Change) GetNew() *Lines {
	if x != nil {
		return x.New
	}
	return nil
}

func (x *Change) GetInlineChanges() []*InlineChanges {
	if x != nil {
		return x.InlineChanges
	}
	return nil
}

type InlineChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Old *LineVersion `protobuf:"bytes,1,opt,name=old,proto3" json:"old,omitempty"`
	New *LineVersion `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *InlineChanges) Reset() {
	*x = InlineChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_semantic_diff_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlineChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlineChanges) ProtoMessage() {}

func (x *InlineChanges) ProtoReflect() protoreflect.Message {
	mi := &file_entities_semantic_diff_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlineChanges.ProtoReflect.Descriptor instead.
func (*InlineChanges) Descriptor() ([]byte, []int) {
	return file_entities_semantic_diff_proto_rawDescGZIP(), []int{9}
}

func (x *InlineChanges) GetOld() *LineVersion {
	if x != nil {
		return x.Old
	}
	return nil
}

func (x *InlineChanges) GetNew() *LineVersion {
	if x != nil {
		return x.New
	}
	return nil
}

type LineVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Words []*WordChange `protobuf:"bytes,1,rep,name=words,proto3" json:"words,omitempty"`
}

func (x *LineVersion) Reset() {
	*x = LineVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_semantic_diff_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineVersion) ProtoMessage() {}

func (x *LineVersion) ProtoReflect() protoreflect.Message {
	mi := &file_entities_semantic_diff_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineVersion.ProtoReflect.Descriptor instead.
func (*LineVersion) Descriptor() ([]byte, []int) {
	return file_entities_semantic_diff_proto_rawDescGZIP(), []int{10}
}

func (x *LineVersion) GetWords() []*WordChange {
	if x != nil {
		return x.Words
	}
	return nil
}

type WordChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ChangeType `protobuf:"varint,1,opt,name=type,proto3,enum=entities.ChangeType" json:"type,omitempty"`
	Span *WordSpan  `protobuf:"bytes,2,opt,name=span,proto3" json:"span,omitempty"`
}

func (x *WordChange) Reset() {
	*x = WordChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_semantic_diff_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WordChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WordChange) ProtoMessage() {}

func (x *WordChange) ProtoReflect() protoreflect.Message {
	mi := &file_entities_semantic_diff_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WordChange.ProtoReflect.Descriptor instead.
func (*WordChange) Descriptor() ([]byte, []int) {
	return file_entities_semantic_diff_proto_rawDescGZIP(), []int{11}
}

func (x *WordChange) GetType() ChangeType {
	if x != nil {
		return x.Type
	}
	return ChangeType_UNMODIFIED
}

func (x *WordChange) GetSpan() *WordSpan {
	if x != nil {
		return x.Span
	}
	return nil
}

type Lines struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLine int32 `protobuf:"varint,1,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	EndLine   int32 `protobuf:"varint,2,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
}

func (x *Lines) Reset() {
	*x = Lines{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_semantic_diff_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lines) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lines) ProtoMessage() {}

func (x *Lines) ProtoReflect() protoreflect.Message {
	mi := &file_entities_semantic_diff_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lines.ProtoReflect.Descriptor instead.
func (*Lines) Descriptor() ([]byte, []int) {
	return file_entities_semantic_diff_proto_rawDescGZIP(), []int{12}
}

func (x *Lines) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *Lines) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

var File_entities_semantic_diff_proto protoreflect.FileDescriptor

var file_entities_semantic_diff_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x6d, 0x61, 0x6e,
	0x74, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x17, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x13, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x06, 0x0a, 0x0a, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x44, 0x69, 0x66, 0x66, 0x12, 0x2f, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6f,
	0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x6e, 0x65, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x12,
	0x35, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x44,
	0x69, 0x66, 0x66, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x32, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x44, 0x69, 0x66, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x55, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x4e, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x55, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x35, 0x0a, 0x09, 0x63,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x52, 0x09, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x30, 0x0a, 0x0a, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x22, 0xfa, 0x02, 0x0a,
	0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2d, 0x0a,
	0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x04,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x05, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4f, 0x6c, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4e, 0x65, 0x77, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x74, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x65, 0x77, 0x22,
	0xe2, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x12, 0x2a, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0c, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x12, 0x37, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x06, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x03, 0x6f, 0x6c,
	0x64, 0x12, 0x21, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52,
	0x03, 0x6e, 0x65, 0x77, 0x12, 0x3e, 0x0a, 0x0e, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x0d, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x0d, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x03, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69,
	0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6f, 0x6c, 0x64, 0x12, 0x27,
	0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x22, 0x39, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x22, 0x5e, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x70,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x64, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x04, 0x73, 0x70,
	0x61, 0x6e, 0x22, 0x41, 0x0a, 0x05, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x2a, 0x3c, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x75, 0x6d, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x4f, 0x50, 0x5f, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x5f, 0x55,
	0x50, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x02, 0x2a, 0x42, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x2c, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x59, 0x4e, 0x54, 0x41,
	0x54, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x2a, 0x1d, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f,
	0x57, 0x4e, 0x10, 0x01, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x70, 0x61, 0x64, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_entities_semantic_diff_proto_rawDescOnce sync.Once
	file_entities_semantic_diff_proto_rawDescData = file_entities_semantic_diff_proto_rawDesc
)

func file_entities_semantic_diff_proto_rawDescGZIP() []byte {
	file_entities_semantic_diff_proto_rawDescOnce.Do(func() {
		file_entities_semantic_diff_proto_rawDescData = protoimpl.X.CompressGZIP(file_entities_semantic_diff_proto_rawDescData)
	})
	return file_entities_semantic_diff_proto_rawDescData
}

var file_entities_semantic_diff_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_entities_semantic_diff_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_entities_semantic_diff_proto_goTypes = []interface{}{
	(SortCriterium)(0),          // 0: entities.SortCriterium
	(ChangeType)(0),             // 1: entities.ChangeType
	(ChangeNature)(0),           // 2: entities.ChangeNature
	(Direction)(0),              // 3: entities.Direction
	(*SymbolDiff)(nil),          // 4: entities.SymbolDiff
	(*SortRank)(nil),            // 5: entities.SortRank
	(*SymbolInfo)(nil),          // 6: entities.SymbolInfo
	(*FileChanges)(nil),         // 7: entities.FileChanges
	(*ChangesBlock)(nil),        // 8: entities.ChangesBlock
	(*Container)(nil),           // 9: entities.Container
	(*CodeChanges)(nil),         // 10: entities.CodeChanges
	(*CodeBlock)(nil),           // 11: entities.CodeBlock
	(*Change)(nil),              // 12: entities.Change
	(*InlineChanges)(nil),       // 13: entities.InlineChanges
	(*LineVersion)(nil),         // 14: entities.LineVersion
	(*WordChange)(nil),          // 15: entities.WordChange
	(*Lines)(nil),               // 16: entities.Lines
	nil,                         // 17: entities.SymbolDiff.DefinitionsEntry
	nil,                         // 18: entities.SymbolDiff.UsesEntry
	(AgnosticType)(0),           // 19: entities.AgnosticType
	(*SymbolDocumentation)(nil), // 20: entities.SymbolDocumentation
	(*WordReference)(nil),       // 21: entities.WordReference
	(*WordSpan)(nil),            // 22: entities.WordSpan
}
var file_entities_semantic_diff_proto_depIdxs = []int32{
	6,  // 0: entities.SymbolDiff.old_info:type_name -> entities.SymbolInfo
	6,  // 1: entities.SymbolDiff.new_info:type_name -> entities.SymbolInfo
	19, // 2: entities.SymbolDiff.agnostic_type:type_name -> entities.AgnosticType
	5,  // 3: entities.SymbolDiff.ranks:type_name -> entities.SortRank
	1,  // 4: entities.SymbolDiff.change_type:type_name -> entities.ChangeType
	17, // 5: entities.SymbolDiff.definitions:type_name -> entities.SymbolDiff.DefinitionsEntry
	18, // 6: entities.SymbolDiff.uses:type_name -> entities.SymbolDiff.UsesEntry
	20, // 7: entities.SymbolDiff.code_comments:type_name -> entities.SymbolDocumentation
	20, // 8: entities.SymbolDiff.signature:type_name -> entities.SymbolDocumentation
	0,  // 9: entities.SortRank.criterium:type_name -> entities.SortCriterium
	8,  // 10: entities.FileChanges.changes:type_name -> entities.ChangesBlock
	10, // 11: entities.ChangesBlock.before:type_name -> entities.CodeChanges
	10, // 12: entities.ChangesBlock.core:type_name -> entities.CodeChanges
	10, // 13: entities.ChangesBlock.after:type_name -> entities.CodeChanges
	9,  // 14: entities.ChangesBlock.container:type_name -> entities.Container
	2,  // 15: entities.ChangesBlock.change_nature:type_name -> entities.ChangeNature
	11, // 16: entities.CodeChanges.old:type_name -> entities.CodeBlock
	11, // 17: entities.CodeChanges.new:type_name -> entities.CodeBlock
	12, // 18: entities.CodeChanges.changes:type_name -> entities.Change
	8,  // 19: entities.CodeChanges.inner_changes:type_name -> entities.ChangesBlock
	21, // 20: entities.CodeBlock.references:type_name -> entities.WordReference
	1,  // 21: entities.Change.type:type_name -> entities.ChangeType
	16, // 22: entities.Change.old:type_name -> entities.Lines
	16, // 23: entities.Change.new:type_name -> entities.Lines
	13, // 24: entities.Change.inline_changes:type_name -> entities.InlineChanges
	14, // 25: entities.InlineChanges.old:type_name -> entities.LineVersion
	14, // 26: entities.InlineChanges.new:type_name -> entities.LineVersion
	15, // 27: entities.LineVersion.words:type_name -> entities.WordChange
	1,  // 28: entities.WordChange.type:type_name -> entities.ChangeType
	22, // 29: entities.WordChange.span:type_name -> entities.WordSpan
	7,  // 30: entities.SymbolDiff.DefinitionsEntry.value:type_name -> entities.FileChanges
	7,  // 31: entities.SymbolDiff.UsesEntry.value:type_name -> entities.FileChanges
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_entities_semantic_diff_proto_init() }
func file_entities_semantic_diff_proto_init() {
	if File_entities_semantic_diff_proto != nil {
		return
	}
	file_entities_language_proto_init()
	file_entities_span_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_entities_semantic_diff_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_semantic_diff_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortRank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_semantic_diff_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_semantic_diff_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_semantic_diff_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangesBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_semantic_diff_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_semantic_diff_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_semantic_diff_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_semantic_diff_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Change); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_semantic_diff_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlineChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_semantic_diff_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_semantic_diff_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WordChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_semantic_diff_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lines); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_entities_semantic_diff_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_entities_semantic_diff_proto_goTypes,
		DependencyIndexes: file_entities_semantic_diff_proto_depIdxs,
		EnumInfos:         file_entities_semantic_diff_proto_enumTypes,
		MessageInfos:      file_entities_semantic_diff_proto_msgTypes,
	}.Build()
	File_entities_semantic_diff_proto = out.File
	file_entities_semantic_diff_proto_rawDesc = nil
	file_entities_semantic_diff_proto_goTypes = nil
	file_entities_semantic_diff_proto_depIdxs = nil
}
