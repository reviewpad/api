// Copyright 2023 Explore.dev Unipessoal Lda. All Rights Reserved.
// Use of this source code is governed by a license that can be
// found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: entities/code_review.proto

package entities

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CodeReviewStatus int32

const (
	CodeReviewStatus_OPEN   CodeReviewStatus = 0
	CodeReviewStatus_CLOSED CodeReviewStatus = 1
	CodeReviewStatus_MERGED CodeReviewStatus = 2
)

// Enum value maps for CodeReviewStatus.
var (
	CodeReviewStatus_name = map[int32]string{
		0: "OPEN",
		1: "CLOSED",
		2: "MERGED",
	}
	CodeReviewStatus_value = map[string]int32{
		"OPEN":   0,
		"CLOSED": 1,
		"MERGED": 2,
	}
)

func (x CodeReviewStatus) Enum() *CodeReviewStatus {
	p := new(CodeReviewStatus)
	*p = x
	return p
}

func (x CodeReviewStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeReviewStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_entities_code_review_proto_enumTypes[0].Descriptor()
}

func (CodeReviewStatus) Type() protoreflect.EnumType {
	return &file_entities_code_review_proto_enumTypes[0]
}

func (x CodeReviewStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeReviewStatus.Descriptor instead.
func (CodeReviewStatus) EnumDescriptor() ([]byte, []int) {
	return file_entities_code_review_proto_rawDescGZIP(), []int{0}
}

type ReviewEvent int32

const (
	ReviewEvent_APPROVE         ReviewEvent = 0
	ReviewEvent_REQUEST_CHANGES ReviewEvent = 1
	ReviewEvent_COMMENT         ReviewEvent = 2
	ReviewEvent_UNAPPROVE       ReviewEvent = 3
)

// Enum value maps for ReviewEvent.
var (
	ReviewEvent_name = map[int32]string{
		0: "APPROVE",
		1: "REQUEST_CHANGES",
		2: "COMMENT",
		3: "UNAPPROVE",
	}
	ReviewEvent_value = map[string]int32{
		"APPROVE":         0,
		"REQUEST_CHANGES": 1,
		"COMMENT":         2,
		"UNAPPROVE":       3,
	}
)

func (x ReviewEvent) Enum() *ReviewEvent {
	p := new(ReviewEvent)
	*p = x
	return p
}

func (x ReviewEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReviewEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_entities_code_review_proto_enumTypes[1].Descriptor()
}

func (ReviewEvent) Type() protoreflect.EnumType {
	return &file_entities_code_review_proto_enumTypes[1]
}

func (x ReviewEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReviewEvent.Descriptor instead.
func (ReviewEvent) EnumDescriptor() ([]byte, []int) {
	return file_entities_code_review_proto_rawDescGZIP(), []int{1}
}

type ReviewerStatus int32

const (
	ReviewerStatus_NEUTRAL  ReviewerStatus = 0
	ReviewerStatus_BLOCKED  ReviewerStatus = 1
	ReviewerStatus_APPROVED ReviewerStatus = 2
)

// Enum value maps for ReviewerStatus.
var (
	ReviewerStatus_name = map[int32]string{
		0: "NEUTRAL",
		1: "BLOCKED",
		2: "APPROVED",
	}
	ReviewerStatus_value = map[string]int32{
		"NEUTRAL":  0,
		"BLOCKED":  1,
		"APPROVED": 2,
	}
)

func (x ReviewerStatus) Enum() *ReviewerStatus {
	p := new(ReviewerStatus)
	*p = x
	return p
}

func (x ReviewerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReviewerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_entities_code_review_proto_enumTypes[2].Descriptor()
}

func (ReviewerStatus) Type() protoreflect.EnumType {
	return &file_entities_code_review_proto_enumTypes[2]
}

func (x ReviewerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReviewerStatus.Descriptor instead.
func (ReviewerStatus) EnumDescriptor() ([]byte, []int) {
	return file_entities_code_review_proto_rawDescGZIP(), []int{2}
}

type UserReviewStatus int32

const (
	UserReviewStatus_USER_REQUESTED_CHANGES UserReviewStatus = 0
	UserReviewStatus_USER_APPROVED          UserReviewStatus = 1
	UserReviewStatus_USER_COMMENTED         UserReviewStatus = 2
	UserReviewStatus_PENDING                UserReviewStatus = 3
	UserReviewStatus_DISMISSED              UserReviewStatus = 4
)

// Enum value maps for UserReviewStatus.
var (
	UserReviewStatus_name = map[int32]string{
		0: "USER_REQUESTED_CHANGES",
		1: "USER_APPROVED",
		2: "USER_COMMENTED",
		3: "PENDING",
		4: "DISMISSED",
	}
	UserReviewStatus_value = map[string]int32{
		"USER_REQUESTED_CHANGES": 0,
		"USER_APPROVED":          1,
		"USER_COMMENTED":         2,
		"PENDING":                3,
		"DISMISSED":              4,
	}
)

func (x UserReviewStatus) Enum() *UserReviewStatus {
	p := new(UserReviewStatus)
	*p = x
	return p
}

func (x UserReviewStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserReviewStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_entities_code_review_proto_enumTypes[3].Descriptor()
}

func (UserReviewStatus) Type() protoreflect.EnumType {
	return &file_entities_code_review_proto_enumTypes[3]
}

func (x UserReviewStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserReviewStatus.Descriptor instead.
func (UserReviewStatus) EnumDescriptor() ([]byte, []int) {
	return file_entities_code_review_proto_rawDescGZIP(), []int{3}
}

type ExternalUserReview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseCommitId string           `protobuf:"bytes,1,opt,name=base_commit_id,json=baseCommitId,proto3" json:"base_commit_id,omitempty"`
	HeadCommitId string           `protobuf:"bytes,2,opt,name=head_commit_id,json=headCommitId,proto3" json:"head_commit_id,omitempty"`
	Status       UserReviewStatus `protobuf:"varint,3,opt,name=status,proto3,enum=entities.UserReviewStatus" json:"status,omitempty"`
	Body         string           `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	CreatedAt    int64            `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    int64            `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Id           string           `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ExternalUserReview) Reset() {
	*x = ExternalUserReview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_code_review_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalUserReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalUserReview) ProtoMessage() {}

func (x *ExternalUserReview) ProtoReflect() protoreflect.Message {
	mi := &file_entities_code_review_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalUserReview.ProtoReflect.Descriptor instead.
func (*ExternalUserReview) Descriptor() ([]byte, []int) {
	return file_entities_code_review_proto_rawDescGZIP(), []int{0}
}

func (x *ExternalUserReview) GetBaseCommitId() string {
	if x != nil {
		return x.BaseCommitId
	}
	return ""
}

func (x *ExternalUserReview) GetHeadCommitId() string {
	if x != nil {
		return x.HeadCommitId
	}
	return ""
}

func (x *ExternalUserReview) GetStatus() UserReviewStatus {
	if x != nil {
		return x.Status
	}
	return UserReviewStatus_USER_REQUESTED_CHANGES
}

func (x *ExternalUserReview) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *ExternalUserReview) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ExternalUserReview) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ExternalUserReview) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ExternalUserReviews struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Participant *ExternalUser         `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	Reviews     []*ExternalUserReview `protobuf:"bytes,2,rep,name=reviews,proto3" json:"reviews,omitempty"`
}

func (x *ExternalUserReviews) Reset() {
	*x = ExternalUserReviews{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_code_review_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalUserReviews) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalUserReviews) ProtoMessage() {}

func (x *ExternalUserReviews) ProtoReflect() protoreflect.Message {
	mi := &file_entities_code_review_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalUserReviews.ProtoReflect.Descriptor instead.
func (*ExternalUserReviews) Descriptor() ([]byte, []int) {
	return file_entities_code_review_proto_rawDescGZIP(), []int{1}
}

func (x *ExternalUserReviews) GetParticipant() *ExternalUser {
	if x != nil {
		return x.Participant
	}
	return nil
}

func (x *ExternalUserReviews) GetReviews() []*ExternalUserReview {
	if x != nil {
		return x.Reviews
	}
	return nil
}

type ExternalReviewer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reviewer       *ExternalUser  `protobuf:"bytes,1,opt,name=reviewer,proto3" json:"reviewer,omitempty"`
	Status         ReviewerStatus `protobuf:"varint,2,opt,name=status,proto3,enum=entities.ReviewerStatus" json:"status,omitempty"`
	ActionRequired bool           `protobuf:"varint,3,opt,name=action_required,json=actionRequired,proto3" json:"action_required,omitempty"`
}

func (x *ExternalReviewer) Reset() {
	*x = ExternalReviewer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_code_review_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalReviewer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalReviewer) ProtoMessage() {}

func (x *ExternalReviewer) ProtoReflect() protoreflect.Message {
	mi := &file_entities_code_review_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalReviewer.ProtoReflect.Descriptor instead.
func (*ExternalReviewer) Descriptor() ([]byte, []int) {
	return file_entities_code_review_proto_rawDescGZIP(), []int{2}
}

func (x *ExternalReviewer) GetReviewer() *ExternalUser {
	if x != nil {
		return x.Reviewer
	}
	return nil
}

func (x *ExternalReviewer) GetStatus() ReviewerStatus {
	if x != nil {
		return x.Status
	}
	return ReviewerStatus_NEUTRAL
}

func (x *ExternalReviewer) GetActionRequired() bool {
	if x != nil {
		return x.ActionRequired
	}
	return false
}

type ExternalCodeReview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number             int32                           `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	CreatedAt          int64                           `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt          int64                           `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	RepoId             string                          `protobuf:"bytes,4,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	Author             *ExternalUser                   `protobuf:"bytes,5,opt,name=author,proto3" json:"author,omitempty"`
	Title              string                          `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Description        string                          `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	HeadBranch         string                          `protobuf:"bytes,8,opt,name=head_branch,json=headBranch,proto3" json:"head_branch,omitempty"`
	BaseBranch         string                          `protobuf:"bytes,9,opt,name=base_branch,json=baseBranch,proto3" json:"base_branch,omitempty"`
	Status             CodeReviewStatus                `protobuf:"varint,10,opt,name=status,proto3,enum=entities.CodeReviewStatus" json:"status,omitempty"`
	Reviewers          map[string]*ExternalReviewer    `protobuf:"bytes,11,rep,name=reviewers,proto3" json:"reviewers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UserToReviews      map[string]*ExternalUserReviews `protobuf:"bytes,12,rep,name=user_to_reviews,json=userToReviews,proto3" json:"user_to_reviews,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IsDraft            *bool                           `protobuf:"varint,13,opt,name=is_draft,json=isDraft,proto3,oneof" json:"is_draft,omitempty"`
	BaseCommit         string                          `protobuf:"bytes,14,opt,name=base_commit,json=baseCommit,proto3" json:"base_commit,omitempty"`
	HeadCommit         string                          `protobuf:"bytes,15,opt,name=head_commit,json=headCommit,proto3" json:"head_commit,omitempty"`
	CanMerge           bool                            `protobuf:"varint,16,opt,name=can_merge,json=canMerge,proto3" json:"can_merge,omitempty"`
	NodeId             string                          `protobuf:"bytes,17,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Labels             []*Label                        `protobuf:"bytes,18,rep,name=labels,proto3" json:"labels,omitempty"`
	MergeCommit        string                          `protobuf:"bytes,19,opt,name=merge_commit,json=mergeCommit,proto3" json:"merge_commit,omitempty"` //Merge commit in master if it exists
	TeamReviewers      map[string]*Team                `protobuf:"bytes,20,rep,name=team_reviewers,json=teamReviewers,proto3" json:"team_reviewers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CommentsCount      int64                           `protobuf:"varint,21,opt,name=comments_count,json=commentsCount,proto3" json:"comments_count,omitempty"`
	CommitsCount       int64                           `protobuf:"varint,22,opt,name=commits_count,json=commitsCount,proto3" json:"commits_count,omitempty"`
	Assignees          []*ExternalUser                 `protobuf:"bytes,23,rep,name=assignees,proto3" json:"assignees,omitempty"`
	Merged             bool                            `protobuf:"varint,24,opt,name=merged,proto3" json:"merged,omitempty"`
	ClosedAt           int64                           `protobuf:"varint,25,opt,name=closed_at,json=closedAt,proto3" json:"closed_at,omitempty"`
	Rebaseable         bool                            `protobuf:"varint,26,opt,name=rebaseable,proto3" json:"rebaseable,omitempty"`
	Url                string                          `protobuf:"bytes,27,opt,name=url,proto3" json:"url,omitempty"`
	MergedAt           int64                           `protobuf:"varint,28,opt,name=merged_at,json=mergedAt,proto3" json:"merged_at,omitempty"`
	Milestone          *Milestone                      `protobuf:"bytes,29,opt,name=milestone,proto3" json:"milestone,omitempty"`
	Additions          int64                           `protobuf:"varint,30,opt,name=additions,proto3" json:"additions,omitempty"`
	Deletions          int64                           `protobuf:"varint,31,opt,name=deletions,proto3" json:"deletions,omitempty"`
	ChangedFilesCount  int64                           `protobuf:"varint,32,opt,name=changed_files_count,json=changedFilesCount,proto3" json:"changed_files_count,omitempty"`
	Base               *Branch                         `protobuf:"bytes,33,opt,name=base,proto3" json:"base,omitempty"`
	Head               *Branch                         `protobuf:"bytes,34,opt,name=head,proto3" json:"head,omitempty"`
	RequestedReviewers *RequestedReviewers             `protobuf:"bytes,35,opt,name=requested_reviewers,json=requestedReviewers,proto3" json:"requested_reviewers,omitempty"`
}

func (x *ExternalCodeReview) Reset() {
	*x = ExternalCodeReview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_code_review_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalCodeReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalCodeReview) ProtoMessage() {}

func (x *ExternalCodeReview) ProtoReflect() protoreflect.Message {
	mi := &file_entities_code_review_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalCodeReview.ProtoReflect.Descriptor instead.
func (*ExternalCodeReview) Descriptor() ([]byte, []int) {
	return file_entities_code_review_proto_rawDescGZIP(), []int{3}
}

func (x *ExternalCodeReview) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ExternalCodeReview) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ExternalCodeReview) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *ExternalCodeReview) GetRepoId() string {
	if x != nil {
		return x.RepoId
	}
	return ""
}

func (x *ExternalCodeReview) GetAuthor() *ExternalUser {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *ExternalCodeReview) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ExternalCodeReview) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExternalCodeReview) GetHeadBranch() string {
	if x != nil {
		return x.HeadBranch
	}
	return ""
}

func (x *ExternalCodeReview) GetBaseBranch() string {
	if x != nil {
		return x.BaseBranch
	}
	return ""
}

func (x *ExternalCodeReview) GetStatus() CodeReviewStatus {
	if x != nil {
		return x.Status
	}
	return CodeReviewStatus_OPEN
}

func (x *ExternalCodeReview) GetReviewers() map[string]*ExternalReviewer {
	if x != nil {
		return x.Reviewers
	}
	return nil
}

func (x *ExternalCodeReview) GetUserToReviews() map[string]*ExternalUserReviews {
	if x != nil {
		return x.UserToReviews
	}
	return nil
}

func (x *ExternalCodeReview) GetIsDraft() bool {
	if x != nil && x.IsDraft != nil {
		return *x.IsDraft
	}
	return false
}

func (x *ExternalCodeReview) GetBaseCommit() string {
	if x != nil {
		return x.BaseCommit
	}
	return ""
}

func (x *ExternalCodeReview) GetHeadCommit() string {
	if x != nil {
		return x.HeadCommit
	}
	return ""
}

func (x *ExternalCodeReview) GetCanMerge() bool {
	if x != nil {
		return x.CanMerge
	}
	return false
}

func (x *ExternalCodeReview) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ExternalCodeReview) GetLabels() []*Label {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ExternalCodeReview) GetMergeCommit() string {
	if x != nil {
		return x.MergeCommit
	}
	return ""
}

func (x *ExternalCodeReview) GetTeamReviewers() map[string]*Team {
	if x != nil {
		return x.TeamReviewers
	}
	return nil
}

func (x *ExternalCodeReview) GetCommentsCount() int64 {
	if x != nil {
		return x.CommentsCount
	}
	return 0
}

func (x *ExternalCodeReview) GetCommitsCount() int64 {
	if x != nil {
		return x.CommitsCount
	}
	return 0
}

func (x *ExternalCodeReview) GetAssignees() []*ExternalUser {
	if x != nil {
		return x.Assignees
	}
	return nil
}

func (x *ExternalCodeReview) GetMerged() bool {
	if x != nil {
		return x.Merged
	}
	return false
}

func (x *ExternalCodeReview) GetClosedAt() int64 {
	if x != nil {
		return x.ClosedAt
	}
	return 0
}

func (x *ExternalCodeReview) GetRebaseable() bool {
	if x != nil {
		return x.Rebaseable
	}
	return false
}

func (x *ExternalCodeReview) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ExternalCodeReview) GetMergedAt() int64 {
	if x != nil {
		return x.MergedAt
	}
	return 0
}

func (x *ExternalCodeReview) GetMilestone() *Milestone {
	if x != nil {
		return x.Milestone
	}
	return nil
}

func (x *ExternalCodeReview) GetAdditions() int64 {
	if x != nil {
		return x.Additions
	}
	return 0
}

func (x *ExternalCodeReview) GetDeletions() int64 {
	if x != nil {
		return x.Deletions
	}
	return 0
}

func (x *ExternalCodeReview) GetChangedFilesCount() int64 {
	if x != nil {
		return x.ChangedFilesCount
	}
	return 0
}

func (x *ExternalCodeReview) GetBase() *Branch {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ExternalCodeReview) GetHead() *Branch {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *ExternalCodeReview) GetRequestedReviewers() *RequestedReviewers {
	if x != nil {
		return x.RequestedReviewers
	}
	return nil
}

type Reviewer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CodeReviewId   string         `protobuf:"bytes,2,opt,name=code_review_id,json=codeReviewId,proto3" json:"code_review_id,omitempty"`
	UserId         string         `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExternalUser   *ExternalUser  `protobuf:"bytes,4,opt,name=external_user,json=externalUser,proto3" json:"external_user,omitempty"`
	Status         ReviewerStatus `protobuf:"varint,5,opt,name=status,proto3,enum=entities.ReviewerStatus" json:"status,omitempty"`
	ActionRequired bool           `protobuf:"varint,6,opt,name=action_required,json=actionRequired,proto3" json:"action_required,omitempty"`
	LastReviewedAt int64          `protobuf:"varint,7,opt,name=last_reviewed_at,json=lastReviewedAt,proto3" json:"last_reviewed_at,omitempty"`
}

func (x *Reviewer) Reset() {
	*x = Reviewer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_code_review_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reviewer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reviewer) ProtoMessage() {}

func (x *Reviewer) ProtoReflect() protoreflect.Message {
	mi := &file_entities_code_review_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reviewer.ProtoReflect.Descriptor instead.
func (*Reviewer) Descriptor() ([]byte, []int) {
	return file_entities_code_review_proto_rawDescGZIP(), []int{4}
}

func (x *Reviewer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Reviewer) GetCodeReviewId() string {
	if x != nil {
		return x.CodeReviewId
	}
	return ""
}

func (x *Reviewer) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Reviewer) GetExternalUser() *ExternalUser {
	if x != nil {
		return x.ExternalUser
	}
	return nil
}

func (x *Reviewer) GetStatus() ReviewerStatus {
	if x != nil {
		return x.Status
	}
	return ReviewerStatus_NEUTRAL
}

func (x *Reviewer) GetActionRequired() bool {
	if x != nil {
		return x.ActionRequired
	}
	return false
}

func (x *Reviewer) GetLastReviewedAt() int64 {
	if x != nil {
		return x.LastReviewedAt
	}
	return 0
}

type UserReview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ReviewerId   string           `protobuf:"bytes,2,opt,name=reviewer_id,json=reviewerId,proto3" json:"reviewer_id,omitempty"`
	BaseCommitId string           `protobuf:"bytes,3,opt,name=base_commit_id,json=baseCommitId,proto3" json:"base_commit_id,omitempty"`
	HeadCommitId string           `protobuf:"bytes,4,opt,name=head_commit_id,json=headCommitId,proto3" json:"head_commit_id,omitempty"`
	Body         string           `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	Status       UserReviewStatus `protobuf:"varint,6,opt,name=status,proto3,enum=entities.UserReviewStatus" json:"status,omitempty"`
	CreatedAt    int64            `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    int64            `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ExternalId   string           `protobuf:"bytes,9,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (x *UserReview) Reset() {
	*x = UserReview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_code_review_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReview) ProtoMessage() {}

func (x *UserReview) ProtoReflect() protoreflect.Message {
	mi := &file_entities_code_review_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReview.ProtoReflect.Descriptor instead.
func (*UserReview) Descriptor() ([]byte, []int) {
	return file_entities_code_review_proto_rawDescGZIP(), []int{5}
}

func (x *UserReview) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserReview) GetReviewerId() string {
	if x != nil {
		return x.ReviewerId
	}
	return ""
}

func (x *UserReview) GetBaseCommitId() string {
	if x != nil {
		return x.BaseCommitId
	}
	return ""
}

func (x *UserReview) GetHeadCommitId() string {
	if x != nil {
		return x.HeadCommitId
	}
	return ""
}

func (x *UserReview) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *UserReview) GetStatus() UserReviewStatus {
	if x != nil {
		return x.Status
	}
	return UserReviewStatus_USER_REQUESTED_CHANGES
}

func (x *UserReview) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UserReview) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *UserReview) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

type ReviewProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CodeReviewId          string   `protobuf:"bytes,2,opt,name=code_review_id,json=codeReviewId,proto3" json:"code_review_id,omitempty"`
	UserId                string   `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BaseCommitId          string   `protobuf:"bytes,4,opt,name=base_commit_id,json=baseCommitId,proto3" json:"base_commit_id,omitempty"`
	HeadCommitId          string   `protobuf:"bytes,5,opt,name=head_commit_id,json=headCommitId,proto3" json:"head_commit_id,omitempty"`
	ReviewedFiles         []string `protobuf:"bytes,6,rep,name=reviewed_files,json=reviewedFiles,proto3" json:"reviewed_files,omitempty"`
	ModifiedSinceReviewed []string `protobuf:"bytes,7,rep,name=modified_since_reviewed,json=modifiedSinceReviewed,proto3" json:"modified_since_reviewed,omitempty"`
}

func (x *ReviewProgress) Reset() {
	*x = ReviewProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_code_review_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewProgress) ProtoMessage() {}

func (x *ReviewProgress) ProtoReflect() protoreflect.Message {
	mi := &file_entities_code_review_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewProgress.ProtoReflect.Descriptor instead.
func (*ReviewProgress) Descriptor() ([]byte, []int) {
	return file_entities_code_review_proto_rawDescGZIP(), []int{6}
}

func (x *ReviewProgress) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ReviewProgress) GetCodeReviewId() string {
	if x != nil {
		return x.CodeReviewId
	}
	return ""
}

func (x *ReviewProgress) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ReviewProgress) GetBaseCommitId() string {
	if x != nil {
		return x.BaseCommitId
	}
	return ""
}

func (x *ReviewProgress) GetHeadCommitId() string {
	if x != nil {
		return x.HeadCommitId
	}
	return ""
}

func (x *ReviewProgress) GetReviewedFiles() []string {
	if x != nil {
		return x.ReviewedFiles
	}
	return nil
}

func (x *ReviewProgress) GetModifiedSinceReviewed() []string {
	if x != nil {
		return x.ModifiedSinceReviewed
	}
	return nil
}

type RequestedReviewers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*ExternalUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Teams []*Team         `protobuf:"bytes,2,rep,name=teams,proto3" json:"teams,omitempty"`
}

func (x *RequestedReviewers) Reset() {
	*x = RequestedReviewers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entities_code_review_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestedReviewers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestedReviewers) ProtoMessage() {}

func (x *RequestedReviewers) ProtoReflect() protoreflect.Message {
	mi := &file_entities_code_review_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestedReviewers.ProtoReflect.Descriptor instead.
func (*RequestedReviewers) Descriptor() ([]byte, []int) {
	return file_entities_code_review_proto_rawDescGZIP(), []int{7}
}

func (x *RequestedReviewers) GetUsers() []*ExternalUser {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *RequestedReviewers) GetTeams() []*Team {
	if x != nil {
		return x.Teams
	}
	return nil
}

var File_entities_code_review_proto protoreflect.FileDescriptor

var file_entities_code_review_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x1c, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x18, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x6d, 0x69, 0x6c, 0x65, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xf6, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x07, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x9b, 0x0d, 0x0a, 0x12, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61,
	0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61,
	0x73, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x09,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x54, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73,
	0x12, 0x1e, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x69, 0x73, 0x44, 0x72, 0x61, 0x66, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x56, 0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x09, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x09, 0x6d, 0x69, 0x6c, 0x65,
	0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x68, 0x65, 0x61, 0x64, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x4d, 0x0a,
	0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x1a, 0x58, 0x0a, 0x0e,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50, 0x0a, 0x12, 0x54, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x73,
	0x5f, 0x64, 0x72, 0x61, 0x66, 0x74, 0x22, 0x9b, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xb0, 0x02, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61,
	0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x65,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x64, 0x22, 0x68, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x2a, 0x34,
	0x0a, 0x10, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x52, 0x47,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0x4b, 0x0a, 0x0b, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x10,
	0x03, 0x2a, 0x38, 0x0a, 0x0e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x71, 0x0a, 0x10, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x16, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45,
	0x44, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44, 0x10, 0x04, 0x42, 0x26,
	0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x70, 0x61, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_entities_code_review_proto_rawDescOnce sync.Once
	file_entities_code_review_proto_rawDescData = file_entities_code_review_proto_rawDesc
)

func file_entities_code_review_proto_rawDescGZIP() []byte {
	file_entities_code_review_proto_rawDescOnce.Do(func() {
		file_entities_code_review_proto_rawDescData = protoimpl.X.CompressGZIP(file_entities_code_review_proto_rawDescData)
	})
	return file_entities_code_review_proto_rawDescData
}

var file_entities_code_review_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_entities_code_review_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_entities_code_review_proto_goTypes = []interface{}{
	(CodeReviewStatus)(0),       // 0: entities.CodeReviewStatus
	(ReviewEvent)(0),            // 1: entities.ReviewEvent
	(ReviewerStatus)(0),         // 2: entities.ReviewerStatus
	(UserReviewStatus)(0),       // 3: entities.UserReviewStatus
	(*ExternalUserReview)(nil),  // 4: entities.ExternalUserReview
	(*ExternalUserReviews)(nil), // 5: entities.ExternalUserReviews
	(*ExternalReviewer)(nil),    // 6: entities.ExternalReviewer
	(*ExternalCodeReview)(nil),  // 7: entities.ExternalCodeReview
	(*Reviewer)(nil),            // 8: entities.Reviewer
	(*UserReview)(nil),          // 9: entities.UserReview
	(*ReviewProgress)(nil),      // 10: entities.ReviewProgress
	(*RequestedReviewers)(nil),  // 11: entities.RequestedReviewers
	nil,                         // 12: entities.ExternalCodeReview.ReviewersEntry
	nil,                         // 13: entities.ExternalCodeReview.UserToReviewsEntry
	nil,                         // 14: entities.ExternalCodeReview.TeamReviewersEntry
	(*ExternalUser)(nil),        // 15: entities.ExternalUser
	(*Label)(nil),               // 16: entities.Label
	(*Milestone)(nil),           // 17: entities.Milestone
	(*Branch)(nil),              // 18: entities.Branch
	(*Team)(nil),                // 19: entities.Team
}
var file_entities_code_review_proto_depIdxs = []int32{
	3,  // 0: entities.ExternalUserReview.status:type_name -> entities.UserReviewStatus
	15, // 1: entities.ExternalUserReviews.participant:type_name -> entities.ExternalUser
	4,  // 2: entities.ExternalUserReviews.reviews:type_name -> entities.ExternalUserReview
	15, // 3: entities.ExternalReviewer.reviewer:type_name -> entities.ExternalUser
	2,  // 4: entities.ExternalReviewer.status:type_name -> entities.ReviewerStatus
	15, // 5: entities.ExternalCodeReview.author:type_name -> entities.ExternalUser
	0,  // 6: entities.ExternalCodeReview.status:type_name -> entities.CodeReviewStatus
	12, // 7: entities.ExternalCodeReview.reviewers:type_name -> entities.ExternalCodeReview.ReviewersEntry
	13, // 8: entities.ExternalCodeReview.user_to_reviews:type_name -> entities.ExternalCodeReview.UserToReviewsEntry
	16, // 9: entities.ExternalCodeReview.labels:type_name -> entities.Label
	14, // 10: entities.ExternalCodeReview.team_reviewers:type_name -> entities.ExternalCodeReview.TeamReviewersEntry
	15, // 11: entities.ExternalCodeReview.assignees:type_name -> entities.ExternalUser
	17, // 12: entities.ExternalCodeReview.milestone:type_name -> entities.Milestone
	18, // 13: entities.ExternalCodeReview.base:type_name -> entities.Branch
	18, // 14: entities.ExternalCodeReview.head:type_name -> entities.Branch
	11, // 15: entities.ExternalCodeReview.requested_reviewers:type_name -> entities.RequestedReviewers
	15, // 16: entities.Reviewer.external_user:type_name -> entities.ExternalUser
	2,  // 17: entities.Reviewer.status:type_name -> entities.ReviewerStatus
	3,  // 18: entities.UserReview.status:type_name -> entities.UserReviewStatus
	15, // 19: entities.RequestedReviewers.users:type_name -> entities.ExternalUser
	19, // 20: entities.RequestedReviewers.teams:type_name -> entities.Team
	6,  // 21: entities.ExternalCodeReview.ReviewersEntry.value:type_name -> entities.ExternalReviewer
	5,  // 22: entities.ExternalCodeReview.UserToReviewsEntry.value:type_name -> entities.ExternalUserReviews
	19, // 23: entities.ExternalCodeReview.TeamReviewersEntry.value:type_name -> entities.Team
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_entities_code_review_proto_init() }
func file_entities_code_review_proto_init() {
	if File_entities_code_review_proto != nil {
		return
	}
	file_entities_external_user_proto_init()
	file_entities_label_proto_init()
	file_entities_teams_proto_init()
	file_entities_milestone_proto_init()
	file_entities_branch_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_entities_code_review_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalUserReview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_code_review_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalUserReviews); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_code_review_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalReviewer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_code_review_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalCodeReview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_code_review_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reviewer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_code_review_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserReview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_code_review_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_entities_code_review_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestedReviewers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_entities_code_review_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_entities_code_review_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_entities_code_review_proto_goTypes,
		DependencyIndexes: file_entities_code_review_proto_depIdxs,
		EnumInfos:         file_entities_code_review_proto_enumTypes,
		MessageInfos:      file_entities_code_review_proto_msgTypes,
	}.Build()
	File_entities_code_review_proto = out.File
	file_entities_code_review_proto_rawDesc = nil
	file_entities_code_review_proto_goTypes = nil
	file_entities_code_review_proto_depIdxs = nil
}
