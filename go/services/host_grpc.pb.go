// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HostClient is the client API for Host service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostClient interface {
	PostGeneralComment(ctx context.Context, in *PostGeneralCommentRequest, opts ...grpc.CallOption) (*PostGeneralCommentReply, error)
	GetPullRequest(ctx context.Context, in *GetPullRequestRequest, opts ...grpc.CallOption) (*GetPullRequestReply, error)
	GetPullRequestFiles(ctx context.Context, in *GetPullRequestFilesRequest, opts ...grpc.CallOption) (*GetPullRequestFilesReply, error)
}

type hostClient struct {
	cc grpc.ClientConnInterface
}

func NewHostClient(cc grpc.ClientConnInterface) HostClient {
	return &hostClient{cc}
}

func (c *hostClient) PostGeneralComment(ctx context.Context, in *PostGeneralCommentRequest, opts ...grpc.CallOption) (*PostGeneralCommentReply, error) {
	out := new(PostGeneralCommentReply)
	err := c.cc.Invoke(ctx, "/services.Host/PostGeneralComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) GetPullRequest(ctx context.Context, in *GetPullRequestRequest, opts ...grpc.CallOption) (*GetPullRequestReply, error) {
	out := new(GetPullRequestReply)
	err := c.cc.Invoke(ctx, "/services.Host/GetPullRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostClient) GetPullRequestFiles(ctx context.Context, in *GetPullRequestFilesRequest, opts ...grpc.CallOption) (*GetPullRequestFilesReply, error) {
	out := new(GetPullRequestFilesReply)
	err := c.cc.Invoke(ctx, "/services.Host/GetPullRequestFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostServer is the server API for Host service.
// All implementations must embed UnimplementedHostServer
// for forward compatibility
type HostServer interface {
	PostGeneralComment(context.Context, *PostGeneralCommentRequest) (*PostGeneralCommentReply, error)
	GetPullRequest(context.Context, *GetPullRequestRequest) (*GetPullRequestReply, error)
	GetPullRequestFiles(context.Context, *GetPullRequestFilesRequest) (*GetPullRequestFilesReply, error)
	mustEmbedUnimplementedHostServer()
}

// UnimplementedHostServer must be embedded to have forward compatible implementations.
type UnimplementedHostServer struct {
}

func (UnimplementedHostServer) PostGeneralComment(context.Context, *PostGeneralCommentRequest) (*PostGeneralCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostGeneralComment not implemented")
}
func (UnimplementedHostServer) GetPullRequest(context.Context, *GetPullRequestRequest) (*GetPullRequestReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPullRequest not implemented")
}
func (UnimplementedHostServer) GetPullRequestFiles(context.Context, *GetPullRequestFilesRequest) (*GetPullRequestFilesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPullRequestFiles not implemented")
}
func (UnimplementedHostServer) mustEmbedUnimplementedHostServer() {}

// UnsafeHostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostServer will
// result in compilation errors.
type UnsafeHostServer interface {
	mustEmbedUnimplementedHostServer()
}

func RegisterHostServer(s grpc.ServiceRegistrar, srv HostServer) {
	s.RegisterService(&Host_ServiceDesc, srv)
}

func _Host_PostGeneralComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostGeneralCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).PostGeneralComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Host/PostGeneralComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).PostGeneralComment(ctx, req.(*PostGeneralCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_GetPullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPullRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).GetPullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Host/GetPullRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).GetPullRequest(ctx, req.(*GetPullRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Host_GetPullRequestFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPullRequestFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServer).GetPullRequestFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.Host/GetPullRequestFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServer).GetPullRequestFiles(ctx, req.(*GetPullRequestFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Host_ServiceDesc is the grpc.ServiceDesc for Host service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Host_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.Host",
	HandlerType: (*HostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostGeneralComment",
			Handler:    _Host_PostGeneralComment_Handler,
		},
		{
			MethodName: "GetPullRequest",
			Handler:    _Host_GetPullRequest_Handler,
		},
		{
			MethodName: "GetPullRequestFiles",
			Handler:    _Host_GetPullRequestFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/host.proto",
}
